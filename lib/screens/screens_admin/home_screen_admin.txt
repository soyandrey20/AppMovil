import 'package:empezar/importaciones/imports.dart';

class HomeScreenAdmin extends StatefulWidget {
  const HomeScreenAdmin({super.key});

  @override
  State<HomeScreenAdmin> createState() => _HomeScreenAdminState();
}

class _HomeScreenAdminState extends State<HomeScreenAdmin> {
  UsuarioProvider usuarioProvider = UsuarioProvider();

  var txtCedula = TextEditingController();
  var txtEmail = TextEditingController();
  var txtPassword = TextEditingController();
  var txtName1 = TextEditingController();
  var txtName2 = TextEditingController();
  var txtLastName1 = TextEditingController();
  var txtLastName2 = TextEditingController();
  bool isEnabled = false;

  @override
  void dispose() {
    txtCedula.dispose();
    txtEmail.dispose();
    txtPassword.dispose();
    txtName1.dispose();
    txtName2.dispose();
    txtLastName1.dispose();
    txtLastName2.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;

    return Scaffold(
      body: Container(
        width: double.infinity,
        height: double.infinity,
        color: Colors.green.shade300,
        child: Stack(
          children: [
            cajaPurpura(size),
            iconoPersona(),
            loginForm(context),
          ],
        ),
      ),
      appBar: AppBar(
        title: const Text('Regresar'),
        leading: Builder(
          builder: (BuildContext context) {
            return IconButton(
              icon: const Icon(Icons.arrow_back),
              onPressed: () {
                Navigator.pushReplacementNamed(context, 'information_admin');
              },
            );
          },
        ),
      ),
    );
  }

  SingleChildScrollView loginForm(BuildContext context) {
    final usuarioProvider = Provider.of<UsuarioProvider>(context);

    var user = usuarioProvider.usuario;

    txtName1.text = user.name_1;
    txtName2.text = user.name_2;
    txtLastName1.text = user.lastName_1;
    txtLastName2.text = user.lastName_2;

    txtPassword.text = user.password;
    txtCedula.text = user.cedula;
    isEnabled = user.estado;

    return SingleChildScrollView(
      child: Column(
        children: [
          const SizedBox(
            height: 200,
          ),
          Container(
            padding: const EdgeInsets.all(20),
            margin: const EdgeInsets.symmetric(horizontal: 30),
            width: double.infinity,
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(20),
              boxShadow: const [
                BoxShadow(
                  color: Colors.black26,
                  blurRadius: 5,
                  offset: Offset(0, 5),
                )
              ],
            ),
            child: Column(
              children: [
                const SizedBox(
                  height: 10,
                ),
                Text('Informacion del usuario',
                    style: Theme.of(context).textTheme.headlineMedium),
                const SizedBox(
                  height: 10,
                ),
                Form(
                  autovalidateMode: AutovalidateMode.onUserInteraction,
                  child: Column(
                    children: [
                      Identification(txtCedula: txtCedula),
                      const SizedBox(
                        height: 10,
                      ),
                      NamesAdmin(txtName1: txtName1, txtName2: txtName2),
                      const SizedBox(
                        height: 10,
                      ),
                      lastNameAdmin(txtLastName1, txtLastName2),
                      const SizedBox(
                        height: 10,
                      ),
                      EmailAdmin(txtEmail: txtEmail),
                      PasswordAdmin(txtPassword: txtPassword),
                      const SizedBox(
                        height: 20,
                      ),
                      MaterialButton(
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10),
                        ),
                        disabledColor: Colors.grey,
                        color: Colors.deepPurple,
                        onPressed: () async {
                          if (txtEmail.text.isEmpty ||
                              !EmailValidator.validate(txtEmail.text)) {
                            ScaffoldMessenger.of(context).showSnackBar(
                              const SnackBar(
                                content:
                                    Text(' por favor ingrese un correo válido'),
                              ),
                            );
                          } else {
                            await usuarioProvider.updateUser(
                                user.cedula,
                                txtName1.text,
                                txtName2.text,
                                user.lastName_1,
                                user.lastName_2,
                                txtEmail.text,
                                user.password,
                                user.permisos,
                                isEnabled);
                            Navigator.pushReplacementNamed(
                                context, 'information_admin');

                            ScaffoldMessenger.of(context).showSnackBar(
                              const SnackBar(
                                content: Text('Usuario actualizado'),
                              ),
                            );
                          }
                        },
                        child: Container(
                          padding: const EdgeInsets.symmetric(
                              horizontal: 30, vertical: 12),
                          child: const Text(
                            'Actualizar',
                            style: TextStyle(color: Colors.white, fontSize: 18),
                          ),
                        ),
                      ),
                      const SizedBox(
                        height: 10,
                      ),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          const Text('Estado del usuario'),
                          Switch(value: isEnabled, onChanged: (value) {}),
                        ],
                      )
                    ],
                  ),
                )
              ],
            ),
          ),
        ],
      ),
    );
  }

  Row lastNameAdmin(
      TextEditingController txtLastName1, TextEditingController txtLastName2) {
    return Row(
      children: [
        Expanded(
          child: TextFormField(
            enabled: false,
            autocorrect: false,
            controller: txtLastName1,
            decoration: InputDecorations.inputDecoration(
              hintText: ' ',
              labelText: 'Primer Apellido*',
              icon: const Icon(Icons.person),
            ),
            validator: (value) {
              String pattern = r'^[A-Za-z]+';
              RegExp regExp = RegExp(pattern);
              return regExp.hasMatch(value ?? '') ? null : 'Apellido no válido';
            },
          ),
        ),
        const SizedBox(width: 10),
        Expanded(
          child: TextFormField(
            enabled: false,
            autocorrect: false,
            controller: txtLastName2,
            decoration: InputDecorations.inputDecoration(
              hintText: ' ',
              labelText: 'Segundo Apellido',
              icon: const Icon(Icons.person_outline),
            ),
          ),
        ),
      ],
    );
  }
}

class EmailValidator {
  static bool validate(String email) {
    String pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z.-]+\.[a-zA-Z]{2,}$';
    RegExp regExp = RegExp(pattern);
    return regExp.hasMatch(email);
  }
}

class Identification extends StatelessWidget {
  const Identification({
    super.key,
    required this.txtCedula,
  });

  final TextEditingController txtCedula;

  @override
  Widget build(BuildContext context) {
    return TextFormField(
      enabled: false,
      autocorrect: false,
      controller: txtCedula,
      decoration: InputDecorations.inputDecoration(
        hintText: '00000000',
        labelText: '# Cédula*',
        icon: const Icon(Icons.assignment_ind_outlined),
      ),
      validator: (value) {
        String pattern = r'^[0-9]{10}$';
        RegExp regExp = RegExp(pattern);
        return regExp.hasMatch(value ?? '') ? null : '# Cédula no válido';
      },
    );
  }
}

class NamesAdmin extends StatelessWidget {
  const NamesAdmin({
    super.key,
    required this.txtName1,
    required this.txtName2,
  });

  final TextEditingController txtName1;
  final TextEditingController txtName2;

  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        Expanded(
          child: TextFormField(
            enabled: false,
            autocorrect: false,
            controller: txtName1,
            decoration: InputDecorations.inputDecoration(
              hintText: ' ',
              labelText: 'Primer nombre*',
              icon: const Icon(Icons.person),
            ),
            validator: (value) {
              String pattern = r'^[A-Za-z]+';
              RegExp regExp = RegExp(pattern);
              return regExp.hasMatch(value ?? '') ? null : 'Nombre no válido';
            },
          ),
        ),
        const SizedBox(
          width: 10,
        ),
        Expanded(
          child: TextFormField(
            enabled: false,
            autocorrect: false,
            controller: txtName2,
            decoration: InputDecorations.inputDecoration(
              hintText: ' ',
              labelText: 'Segundo nombre',
              icon: const Icon(Icons.person_outline),
            ),
          ),
        ),
      ],
    );
  }
}

class EmailAdmin extends StatelessWidget {
  const EmailAdmin({
    super.key,
    required this.txtEmail,
  });

  final TextEditingController txtEmail;

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        TextFormField(
          keyboardType: TextInputType.emailAddress,
          autocorrect: false,
          controller: txtEmail,
          decoration: InputDecorations.inputDecoration(
            hintText: 'ejemplo@gmail.com',
            labelText: 'Correo*',
            icon: const Icon(Icons.alternate_email_rounded),
          ),
          validator: (value) {
            String pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z.-]+\.[a-zA-Z]{2,}$';
            RegExp regExp = RegExp(pattern);
            return regExp.hasMatch(value ?? '') ? null : 'Correo no válido';
          },
        ),
        const SizedBox(
          height: 10,
        ),
      ],
    );
  }
}

class PasswordAdmin extends StatelessWidget {
  const PasswordAdmin({
    super.key,
    required this.txtPassword,
  });

  final TextEditingController txtPassword;

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        TextFormField(
          enabled: false,
          autocorrect: false,
          obscureText: true,
          controller: txtPassword,
          decoration: InputDecorations.inputDecoration(
            hintText: '*********',
            labelText: 'Contraseña*',
            icon: const Icon(Icons.lock_outline),
          ),
          validator: (value) {
            String pattern =
                r'^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$';
            return RegExp(pattern).hasMatch(value ?? '')
                ? null
                : 'La contraseña debe tener al menos 8 caracteres';
          },
        ),
        const SizedBox(
          height: 10,
        ),
      ],
    );
  }
}
