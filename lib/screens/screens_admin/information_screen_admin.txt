import 'package:empezar/importaciones/imports.dart';

class InformationScreenAdmin extends StatefulWidget {
  const InformationScreenAdmin({super.key});

  @override
  State<InformationScreenAdmin> createState() => _InformationScreenAdminState();
}

class _InformationScreenAdminState extends State<InformationScreenAdmin> {
  bool isEnabled = false;
  var txtCedula = TextEditingController();

  @override
  void dispose() {
    txtCedula.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;

    return Scaffold(
      body: Container(
        width: double.infinity,
        height: double.infinity,
        color: Colors.green.shade300,
        child: Stack(
          children: [
            cajaPurpura(size),
            iconoPersona(),
            loginForm(context),
          ],
        ),
      ),
      appBar: AppBar(
        title: const Text('Regresar'),
        leading: Builder(
          builder: (BuildContext context) {
            return IconButton(
              icon: const Icon(Icons.arrow_back),
              onPressed: () {
                Navigator.pushReplacementNamed(context, 'login_admin');
              },
            );
          },
        ),
      ),
    );
  }

  SingleChildScrollView loginForm(BuildContext context) {
    final usuarioProvider = Provider.of<UsuarioProvider>(context);

    var users = usuarioProvider.usuarios;

    return SingleChildScrollView(
      child: Column(
        children: [
          const SizedBox(
            height: 250,
          ),
          Container(
            padding: const EdgeInsets.all(20),
            margin: const EdgeInsets.symmetric(horizontal: 30),
            width: double.infinity,
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(20),
              boxShadow: const [
                BoxShadow(
                  color: Colors.black26,
                  blurRadius: 5,
                  offset: Offset(0, 5),
                )
              ],
            ),
            child: Column(
              children: [
                const SizedBox(
                  height: 40,
                ),
                Text('Información de usuario',
                    style: Theme.of(context).textTheme.headlineMedium),
                const SizedBox(
                  height: 40,
                ),
                Form(
                  autovalidateMode: AutovalidateMode.onUserInteraction,
                  child: Column(
                    children: [
                      TextFormField(
                        keyboardType: TextInputType.number,
                        autocorrect: false,
                        controller: txtCedula,
                        decoration: InputDecorations.inputDecoration(
                          hintText: '00000000',
                          labelText: '# Cedula',
                          icon: const Icon(Icons.assignment_ind_outlined),
                        ),
                        validator: (value) {
                          String pattern = r'^[0-9]{10}$';
                          RegExp regExp = RegExp(pattern);
                          return regExp.hasMatch(value ?? '')
                              ? null
                              : '# Cedula no valido';
                        },
                      ),
                      const SizedBox(
                        height: 10,
                      ),
                      Row(
                        children: [
                          MaterialButton(
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                            disabledColor: Colors.grey,
                            color: Colors.deepPurple,
                            onPressed: () async {
                              buscar(
                                  users, txtCedula, usuarioProvider, context);
                            },
                            child: Container(
                              padding: const EdgeInsets.symmetric(
                                  horizontal: 30, vertical: 12),
                              child: const Text(
                                'Buscar',
                                style: TextStyle(
                                    color: Colors.white, fontSize: 18),
                              ),
                            ),
                          ),
                          const SizedBox(
                            width: 25,
                          ),
                          MaterialButton(
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),

                            disabledColor: Colors.grey,
                            color: Colors.red, // Color de eliminación

                            onPressed: () {
                              Deshabilitar(
                                  context, users, txtCedula, usuarioProvider);
                            },
                            child: Container(
                              padding: const EdgeInsets.symmetric(
                                  horizontal: 30, vertical: 12),
                              child: const Text(
                                'Eliminar',
                                style: TextStyle(
                                    color: Colors.white, fontSize: 18),
                              ),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(
                        height: 20,
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          const SizedBox(
            height: 5,
          ),
        ],
      ),
    );
  }

  Future<dynamic> Deshabilitar(BuildContext context, List<Usuarios> users,
      TextEditingController txtCedula, UsuarioProvider usuarioProvider) {
    return showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Confirmación'),
          content:
              const Text('¿Estás seguro de que deseas Eliminar este usuario?'),
          actions: <Widget>[
            TextButton(
              onPressed: () {
                setState(() {});
                Navigator.of(context).pop();
              },
              child: const Text('Cancelar'),
            ),
            TextButton(
              onPressed: () {
                setState(() {
                  var existingAcount = 1;

                  for (var i = 0; i < users.length; i++) {
                    if (users[i].cedula == txtCedula.text) {
                      existingAcount = 0;
                      usuarioProvider.getPersona(users[i].cedula);
                      break;
                    } else {
                      existingAcount;
                    }
                  }

                  if (existingAcount == 0) {
                    usuarioProvider.deleteUser(txtCedula.text, false);
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(
                        content: Text('Usuario eliminado correctamente'),
                      ),
                    );
                  } else {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(
                        content: Text('Cedula no registrada, intente de nuevo'),
                      ),
                    );
                  }
                });
                Navigator.of(context).pop();
              },
              child: const Text('Aceptar'),
            ),
          ],
        );
      },
    );
  }

  void buscar(List<Usuarios> users, TextEditingController txtCedula,
      UsuarioProvider usuarioProvider, BuildContext context) {
    var existingAcount = 1;

    for (var i = 0; i < users.length; i++) {
      if (users[i].cedula == txtCedula.text) {
        existingAcount = 0;
        usuarioProvider.getPersona(users[i].cedula);
        break;
      } else {
        existingAcount;
      }
    }

    if (existingAcount == 0) {
      Navigator.pushReplacementNamed(context, 'home_admin');
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Cedula no registrado, intente de nuevo'),
        ),
      );
    }
  }
}
